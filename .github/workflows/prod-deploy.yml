name: Full CI/CD Pipeline with Server Setup

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker from Official Repo (Fix for Ubuntu 24.04)
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
          sudo systemctl start docker
          sudo systemctl enable docker
          docker --version
          docker compose version  # Verify Docker Compose

      - name: Create Temporary .env File
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
          echo "MAIL_SERVER=smtp" >> .env
          echo "MAIL_PORT=587" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env

      - name: Deploy with Docker Compose
        run: |
          docker compose --env-file .env -f docker/docker-compose-local.yml up --build -d

      - name: Run Tests Inside Test Runner
        run: |
          docker compose -f docker/docker-compose-local.yml run --rm test_runner || echo "TEST_FAILED=true" >> $GITHUB_ENV

      - name: Stop Docker Containers
        run: docker compose -f docker/docker-compose-local.yml down

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: reports/test_report.html

      - name: Send Email on Failure
        if: env.TEST_FAILED == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USER }}
          password: ${{ secrets.EMAIL_PASS }}
          subject: "ðŸš¨ AI Underwriting Test Failed!"
          body: "Please check the attached test report."
          attachments: "reports/test_report.html"
          to: "kunal.vbu@gmail.com, info.tutorride@gmail.com"
          from: "test24.py@gmail.com"

  deploy:
    needs: test
    if: success()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker from Official Repo (Fix for Ubuntu 24.04)
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
          sudo systemctl start docker
          sudo systemctl enable docker
          docker --version
          docker compose version  # Verify Docker Compose

      - name: Create Temporary .env File
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
          echo "MAIL_SERVER=smtp" >> .env
          echo "MAIL_PORT=587" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env

      - name: Deploy with Docker Compose in Production Mode
        run: |
          docker compose --env-file .env -f docker/docker-compose-prod.yml up --build -d


      - name: Confirm Deployment
        run: |
          echo "Checking if app is running..."
          curl -k https://localhost || exit 1

      - name: Cleanup Unused Docker Resources
        run: docker system prune -af
